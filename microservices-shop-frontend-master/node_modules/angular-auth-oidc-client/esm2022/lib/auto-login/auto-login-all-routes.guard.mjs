import { Injectable, inject } from '@angular/core';
import { Router, } from '@angular/router';
import { map, switchMap, take } from 'rxjs/operators';
import { CheckAuthService } from '../auth-state/check-auth.service';
import { ConfigurationService } from '../config/config.service';
import { LoginService } from '../login/login.service';
import { AutoLoginService } from './auto-login.service';
import * as i0 from "@angular/core";
/**
 * @deprecated Please do not use the `AutoLoginAllRoutesGuard` anymore as it is not recommended anymore, deprecated and will be removed in future versions of this library. More information [Why is AutoLoginAllRoutesGuard not recommended?](https://github.com/damienbod/angular-auth-oidc-client/issues/1549)
 */
export class AutoLoginAllRoutesGuard {
    constructor() {
        this.autoLoginService = inject(AutoLoginService);
        this.checkAuthService = inject(CheckAuthService);
        this.loginService = inject(LoginService);
        this.configurationService = inject(ConfigurationService);
        this.router = inject(Router);
    }
    canLoad() {
        const url = this.router
            .getCurrentNavigation()
            ?.extractedUrl.toString()
            .substring(1) ?? '';
        return checkAuth(url, this.configurationService, this.checkAuthService, this.autoLoginService, this.loginService);
    }
    canActivate(route, state) {
        return checkAuth(state.url, this.configurationService, this.checkAuthService, this.autoLoginService, this.loginService);
    }
    canActivateChild(route, state) {
        return checkAuth(state.url, this.configurationService, this.checkAuthService, this.autoLoginService, this.loginService);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: AutoLoginAllRoutesGuard, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: AutoLoginAllRoutesGuard, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: AutoLoginAllRoutesGuard, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
function checkAuth(url, configurationService, checkAuthService, autoLoginService, loginService) {
    return configurationService.getOpenIDConfiguration().pipe(switchMap((config) => {
        const allConfigs = configurationService.getAllConfigurations();
        return checkAuthService.checkAuth(config, allConfigs).pipe(take(1), map(({ isAuthenticated }) => {
            if (isAuthenticated) {
                autoLoginService.checkSavedRedirectRouteAndNavigate(config);
            }
            if (!isAuthenticated) {
                autoLoginService.saveRedirectRoute(config, url);
                loginService.login(config);
            }
            return isAuthenticated;
        }));
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1sb2dpbi1hbGwtcm91dGVzLmd1YXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1hdXRoLW9pZGMtY2xpZW50L3NyYy9saWIvYXV0by1sb2dpbi9hdXRvLWxvZ2luLWFsbC1yb3V0ZXMuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUVMLE1BQU0sR0FHUCxNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFFeEQ7O0dBRUc7QUFFSCxNQUFNLE9BQU8sdUJBQXVCO0lBRHBDO1FBRW1CLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTVDLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTVDLGlCQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXBDLHlCQUFvQixHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBRXBELFdBQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0EyQzFDO0lBekNDLE9BQU87UUFDTCxNQUFNLEdBQUcsR0FDUCxJQUFJLENBQUMsTUFBTTthQUNSLG9CQUFvQixFQUFFO1lBQ3ZCLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRTthQUN4QixTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXhCLE9BQU8sU0FBUyxDQUNkLEdBQUcsRUFDSCxJQUFJLENBQUMsb0JBQW9CLEVBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsRUFDckIsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsWUFBWSxDQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVcsQ0FDVCxLQUE2QixFQUM3QixLQUEwQjtRQUUxQixPQUFPLFNBQVMsQ0FDZCxLQUFLLENBQUMsR0FBRyxFQUNULElBQUksQ0FBQyxvQkFBb0IsRUFDekIsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsZ0JBQWdCLEVBQ3JCLElBQUksQ0FBQyxZQUFZLENBQ2xCLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLENBQ2QsS0FBNkIsRUFDN0IsS0FBMEI7UUFFMUIsT0FBTyxTQUFTLENBQ2QsS0FBSyxDQUFDLEdBQUcsRUFDVCxJQUFJLENBQUMsb0JBQW9CLEVBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsRUFDckIsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsWUFBWSxDQUNsQixDQUFDO0lBQ0osQ0FBQzs4R0FuRFUsdUJBQXVCO2tIQUF2Qix1QkFBdUIsY0FEVixNQUFNOzsyRkFDbkIsdUJBQXVCO2tCQURuQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7QUF1RGxDLFNBQVMsU0FBUyxDQUNoQixHQUFXLEVBQ1gsb0JBQTBDLEVBQzFDLGdCQUFrQyxFQUNsQyxnQkFBa0MsRUFDbEMsWUFBMEI7SUFFMUIsT0FBTyxvQkFBb0IsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLElBQUksQ0FDdkQsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbkIsTUFBTSxVQUFVLEdBQUcsb0JBQW9CLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUUvRCxPQUFPLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUN4RCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLENBQUMsRUFBRSxlQUFlLEVBQUUsRUFBRSxFQUFFO1lBQzFCLElBQUksZUFBZSxFQUFFO2dCQUNuQixnQkFBZ0IsQ0FBQyxrQ0FBa0MsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM3RDtZQUVELElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3BCLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDaEQsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM1QjtZQUVELE9BQU8sZUFBZSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgUm91dGVyLFxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxuICBVcmxUcmVlLFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDaGVja0F1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC1zdGF0ZS9jaGVjay1hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9jb25maWcvY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi4vbG9naW4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBBdXRvTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi9hdXRvLWxvZ2luLnNlcnZpY2UnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSBkbyBub3QgdXNlIHRoZSBgQXV0b0xvZ2luQWxsUm91dGVzR3VhcmRgIGFueW1vcmUgYXMgaXQgaXMgbm90IHJlY29tbWVuZGVkIGFueW1vcmUsIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgdGhpcyBsaWJyYXJ5LiBNb3JlIGluZm9ybWF0aW9uIFtXaHkgaXMgQXV0b0xvZ2luQWxsUm91dGVzR3VhcmQgbm90IHJlY29tbWVuZGVkP10oaHR0cHM6Ly9naXRodWIuY29tL2RhbWllbmJvZC9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQvaXNzdWVzLzE1NDkpXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQXV0b0xvZ2luQWxsUm91dGVzR3VhcmQge1xuICBwcml2YXRlIHJlYWRvbmx5IGF1dG9Mb2dpblNlcnZpY2UgPSBpbmplY3QoQXV0b0xvZ2luU2VydmljZSk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBjaGVja0F1dGhTZXJ2aWNlID0gaW5qZWN0KENoZWNrQXV0aFNlcnZpY2UpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgbG9naW5TZXJ2aWNlID0gaW5qZWN0KExvZ2luU2VydmljZSk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBjb25maWd1cmF0aW9uU2VydmljZSA9IGluamVjdChDb25maWd1cmF0aW9uU2VydmljZSk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSByb3V0ZXIgPSBpbmplY3QoUm91dGVyKTtcblxuICBjYW5Mb2FkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHVybCA9XG4gICAgICB0aGlzLnJvdXRlclxuICAgICAgICAuZ2V0Q3VycmVudE5hdmlnYXRpb24oKVxuICAgICAgICA/LmV4dHJhY3RlZFVybC50b1N0cmluZygpXG4gICAgICAgIC5zdWJzdHJpbmcoMSkgPz8gJyc7XG5cbiAgICByZXR1cm4gY2hlY2tBdXRoKFxuICAgICAgdXJsLFxuICAgICAgdGhpcy5jb25maWd1cmF0aW9uU2VydmljZSxcbiAgICAgIHRoaXMuY2hlY2tBdXRoU2VydmljZSxcbiAgICAgIHRoaXMuYXV0b0xvZ2luU2VydmljZSxcbiAgICAgIHRoaXMubG9naW5TZXJ2aWNlXG4gICAgKTtcbiAgfVxuXG4gIGNhbkFjdGl2YXRlKFxuICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbiB8IFVybFRyZWU+IHtcbiAgICByZXR1cm4gY2hlY2tBdXRoKFxuICAgICAgc3RhdGUudXJsLFxuICAgICAgdGhpcy5jb25maWd1cmF0aW9uU2VydmljZSxcbiAgICAgIHRoaXMuY2hlY2tBdXRoU2VydmljZSxcbiAgICAgIHRoaXMuYXV0b0xvZ2luU2VydmljZSxcbiAgICAgIHRoaXMubG9naW5TZXJ2aWNlXG4gICAgKTtcbiAgfVxuXG4gIGNhbkFjdGl2YXRlQ2hpbGQoXG4gICAgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuIHwgVXJsVHJlZT4ge1xuICAgIHJldHVybiBjaGVja0F1dGgoXG4gICAgICBzdGF0ZS51cmwsXG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlLFxuICAgICAgdGhpcy5jaGVja0F1dGhTZXJ2aWNlLFxuICAgICAgdGhpcy5hdXRvTG9naW5TZXJ2aWNlLFxuICAgICAgdGhpcy5sb2dpblNlcnZpY2VcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrQXV0aChcbiAgdXJsOiBzdHJpbmcsXG4gIGNvbmZpZ3VyYXRpb25TZXJ2aWNlOiBDb25maWd1cmF0aW9uU2VydmljZSxcbiAgY2hlY2tBdXRoU2VydmljZTogQ2hlY2tBdXRoU2VydmljZSxcbiAgYXV0b0xvZ2luU2VydmljZTogQXV0b0xvZ2luU2VydmljZSxcbiAgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2Vcbik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICByZXR1cm4gY29uZmlndXJhdGlvblNlcnZpY2UuZ2V0T3BlbklEQ29uZmlndXJhdGlvbigpLnBpcGUoXG4gICAgc3dpdGNoTWFwKChjb25maWcpID0+IHtcbiAgICAgIGNvbnN0IGFsbENvbmZpZ3MgPSBjb25maWd1cmF0aW9uU2VydmljZS5nZXRBbGxDb25maWd1cmF0aW9ucygpO1xuXG4gICAgICByZXR1cm4gY2hlY2tBdXRoU2VydmljZS5jaGVja0F1dGgoY29uZmlnLCBhbGxDb25maWdzKS5waXBlKFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgICBtYXAoKHsgaXNBdXRoZW50aWNhdGVkIH0pID0+IHtcbiAgICAgICAgICBpZiAoaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICAgICAgICBhdXRvTG9naW5TZXJ2aWNlLmNoZWNrU2F2ZWRSZWRpcmVjdFJvdXRlQW5kTmF2aWdhdGUoY29uZmlnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWlzQXV0aGVudGljYXRlZCkge1xuICAgICAgICAgICAgYXV0b0xvZ2luU2VydmljZS5zYXZlUmVkaXJlY3RSb3V0ZShjb25maWcsIHVybCk7XG4gICAgICAgICAgICBsb2dpblNlcnZpY2UubG9naW4oY29uZmlnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaXNBdXRoZW50aWNhdGVkO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KVxuICApO1xufVxuIl19