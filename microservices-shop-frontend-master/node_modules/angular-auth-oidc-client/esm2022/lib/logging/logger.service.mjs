import { Injectable, inject } from '@angular/core';
import { AbstractLoggerService } from './abstract-logger.service';
import { LogLevel } from './log-level';
import * as i0 from "@angular/core";
export class LoggerService {
    constructor() {
        this.abstractLoggerService = inject(AbstractLoggerService);
    }
    logError(configuration, message, ...args) {
        if (this.loggingIsTurnedOff(configuration)) {
            return;
        }
        const { configId } = configuration;
        const messageToLog = this.isObject(message)
            ? JSON.stringify(message)
            : message;
        if (!!args && !!args.length) {
            this.abstractLoggerService.logError(`[ERROR] ${configId} - ${messageToLog}`, ...args);
        }
        else {
            this.abstractLoggerService.logError(`[ERROR] ${configId} - ${messageToLog}`);
        }
    }
    logWarning(configuration, message, ...args) {
        if (!this.logLevelIsSet(configuration)) {
            return;
        }
        if (this.loggingIsTurnedOff(configuration)) {
            return;
        }
        if (!this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Warn)) {
            return;
        }
        const { configId } = configuration;
        const messageToLog = this.isObject(message)
            ? JSON.stringify(message)
            : message;
        if (!!args && !!args.length) {
            this.abstractLoggerService.logWarning(`[WARN] ${configId} - ${messageToLog}`, ...args);
        }
        else {
            this.abstractLoggerService.logWarning(`[WARN] ${configId} - ${messageToLog}`);
        }
    }
    logDebug(configuration, message, ...args) {
        if (!configuration) {
            return;
        }
        if (!this.logLevelIsSet(configuration)) {
            return;
        }
        if (this.loggingIsTurnedOff(configuration)) {
            return;
        }
        if (!this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Debug)) {
            return;
        }
        const { configId } = configuration;
        const messageToLog = this.isObject(message)
            ? JSON.stringify(message)
            : message;
        if (!!args && !!args.length) {
            this.abstractLoggerService.logDebug(`[DEBUG] ${configId} - ${messageToLog}`, ...args);
        }
        else {
            this.abstractLoggerService.logDebug(`[DEBUG] ${configId} - ${messageToLog}`);
        }
    }
    currentLogLevelIsEqualOrSmallerThan(configuration, logLevelToCompare) {
        const { logLevel } = configuration || {};
        if (!logLevel) {
            return false;
        }
        return logLevel <= logLevelToCompare;
    }
    logLevelIsSet(configuration) {
        const { logLevel } = configuration || {};
        if (logLevel === null) {
            return false;
        }
        return logLevel !== undefined;
    }
    loggingIsTurnedOff(configuration) {
        const { logLevel } = configuration || {};
        return logLevel === LogLevel.None;
    }
    isObject(possibleObject) {
        return Object.prototype.toString.call(possibleObject) === '[object Object]';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: LoggerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: LoggerService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: LoggerService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,