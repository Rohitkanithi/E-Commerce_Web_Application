import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class FlowHelper {
    isCurrentFlowCodeFlow(configuration) {
        return this.currentFlowIs('code', configuration);
    }
    isCurrentFlowAnyImplicitFlow(configuration) {
        return (this.isCurrentFlowImplicitFlowWithAccessToken(configuration) ||
            this.isCurrentFlowImplicitFlowWithoutAccessToken(configuration));
    }
    isCurrentFlowCodeFlowWithRefreshTokens(configuration) {
        if (!configuration) {
            return false;
        }
        const { useRefreshToken } = configuration;
        return (this.isCurrentFlowCodeFlow(configuration) && Boolean(useRefreshToken));
    }
    isCurrentFlowImplicitFlowWithAccessToken(configuration) {
        return this.currentFlowIs('id_token token', configuration);
    }
    currentFlowIs(flowTypes, configuration) {
        const { responseType } = configuration;
        if (Array.isArray(flowTypes)) {
            return flowTypes.some((x) => responseType === x);
        }
        return responseType === flowTypes;
    }
    isCurrentFlowImplicitFlowWithoutAccessToken(configuration) {
        return this.currentFlowIs('id_token', configuration);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: FlowHelper, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: FlowHelper, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: FlowHelper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvdy1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL3V0aWxzL2Zsb3dIZWxwZXIvZmxvdy1oZWxwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQyxNQUFNLE9BQU8sVUFBVTtJQUNyQixxQkFBcUIsQ0FBQyxhQUFrQztRQUN0RCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCw0QkFBNEIsQ0FBQyxhQUFrQztRQUM3RCxPQUFPLENBQ0wsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLGFBQWEsQ0FBQztZQUM1RCxJQUFJLENBQUMsMkNBQTJDLENBQUMsYUFBYSxDQUFDLENBQ2hFLENBQUM7SUFDSixDQUFDO0lBRUQsc0NBQXNDLENBQ3BDLGFBQXlDO1FBRXpDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFFMUMsT0FBTyxDQUNMLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQ3RFLENBQUM7SUFDSixDQUFDO0lBRUQsd0NBQXdDLENBQ3RDLGFBQWtDO1FBRWxDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsYUFBYSxDQUNYLFNBQTRCLEVBQzVCLGFBQWtDO1FBRWxDLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFFdkMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzVCLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsT0FBTyxZQUFZLEtBQUssU0FBUyxDQUFDO0lBQ3BDLENBQUM7SUFFTywyQ0FBMkMsQ0FDakQsYUFBa0M7UUFFbEMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN2RCxDQUFDOzhHQWpEVSxVQUFVO2tIQUFWLFVBQVUsY0FERyxNQUFNOzsyRkFDbkIsVUFBVTtrQkFEdEIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPcGVuSWRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vLi4vY29uZmlnL29wZW5pZC1jb25maWd1cmF0aW9uJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBGbG93SGVscGVyIHtcbiAgaXNDdXJyZW50Rmxvd0NvZGVGbG93KGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Rmxvd0lzKCdjb2RlJywgY29uZmlndXJhdGlvbik7XG4gIH1cblxuICBpc0N1cnJlbnRGbG93QW55SW1wbGljaXRGbG93KGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5pc0N1cnJlbnRGbG93SW1wbGljaXRGbG93V2l0aEFjY2Vzc1Rva2VuKGNvbmZpZ3VyYXRpb24pIHx8XG4gICAgICB0aGlzLmlzQ3VycmVudEZsb3dJbXBsaWNpdEZsb3dXaXRob3V0QWNjZXNzVG9rZW4oY29uZmlndXJhdGlvbilcbiAgICApO1xuICB9XG5cbiAgaXNDdXJyZW50Rmxvd0NvZGVGbG93V2l0aFJlZnJlc2hUb2tlbnMoXG4gICAgY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbiB8IG51bGxcbiAgKTogYm9vbGVhbiB7XG4gICAgaWYgKCFjb25maWd1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgeyB1c2VSZWZyZXNoVG9rZW4gfSA9IGNvbmZpZ3VyYXRpb247XG5cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5pc0N1cnJlbnRGbG93Q29kZUZsb3coY29uZmlndXJhdGlvbikgJiYgQm9vbGVhbih1c2VSZWZyZXNoVG9rZW4pXG4gICAgKTtcbiAgfVxuXG4gIGlzQ3VycmVudEZsb3dJbXBsaWNpdEZsb3dXaXRoQWNjZXNzVG9rZW4oXG4gICAgY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvblxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Rmxvd0lzKCdpZF90b2tlbiB0b2tlbicsIGNvbmZpZ3VyYXRpb24pO1xuICB9XG5cbiAgY3VycmVudEZsb3dJcyhcbiAgICBmbG93VHlwZXM6IHN0cmluZ1tdIHwgc3RyaW5nLFxuICAgIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb25cbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyByZXNwb25zZVR5cGUgfSA9IGNvbmZpZ3VyYXRpb247XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbG93VHlwZXMpKSB7XG4gICAgICByZXR1cm4gZmxvd1R5cGVzLnNvbWUoKHgpID0+IHJlc3BvbnNlVHlwZSA9PT0geCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlVHlwZSA9PT0gZmxvd1R5cGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0N1cnJlbnRGbG93SW1wbGljaXRGbG93V2l0aG91dEFjY2Vzc1Rva2VuKFxuICAgIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb25cbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZsb3dJcygnaWRfdG9rZW4nLCBjb25maWd1cmF0aW9uKTtcbiAgfVxufVxuIl19