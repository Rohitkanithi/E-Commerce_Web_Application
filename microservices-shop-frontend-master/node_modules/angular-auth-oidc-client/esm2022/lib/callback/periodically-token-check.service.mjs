import { inject, Injectable } from '@angular/core';
import { forkJoin, of, throwError } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { AuthStateService } from '../auth-state/auth-state.service';
import { ConfigurationService } from '../config/config.service';
import { FlowsDataService } from '../flows/flows-data.service';
import { ResetAuthDataService } from '../flows/reset-auth-data.service';
import { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';
import { LoggerService } from '../logging/logger.service';
import { EventTypes } from '../public-events/event-types';
import { PublicEventsService } from '../public-events/public-events.service';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { UserService } from '../user-data/user.service';
import { FlowHelper } from '../utils/flowHelper/flow-helper.service';
import { IntervalService } from './interval.service';
import { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';
import * as i0 from "@angular/core";
export class PeriodicallyTokenCheckService {
    constructor() {
        this.resetAuthDataService = inject(ResetAuthDataService);
        this.flowHelper = inject(FlowHelper);
        this.flowsDataService = inject(FlowsDataService);
        this.loggerService = inject(LoggerService);
        this.userService = inject(UserService);
        this.authStateService = inject(AuthStateService);
        this.refreshSessionIframeService = inject(RefreshSessionIframeService);
        this.refreshSessionRefreshTokenService = inject(RefreshSessionRefreshTokenService);
        this.intervalService = inject(IntervalService);
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.publicEventsService = inject(PublicEventsService);
        this.configurationService = inject(ConfigurationService);
    }
    startTokenValidationPeriodically(allConfigs, currentConfig) {
        const configsWithSilentRenewEnabled = this.getConfigsWithSilentRenewEnabled(allConfigs);
        if (configsWithSilentRenewEnabled.length <= 0) {
            return;
        }
        if (this.intervalService.isTokenValidationRunning()) {
            return;
        }
        const refreshTimeInSeconds = this.getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled);
        const periodicallyCheck$ = this.intervalService
            .startPeriodicTokenCheck(refreshTimeInSeconds)
            .pipe(switchMap(() => {
            const objectWithConfigIdsAndRefreshEvent = {};
            configsWithSilentRenewEnabled.forEach((config) => {
                const identifier = config.configId;
                const refreshEvent = this.getRefreshEvent(config, allConfigs);
                objectWithConfigIdsAndRefreshEvent[identifier] = refreshEvent;
            });
            return forkJoin(objectWithConfigIdsAndRefreshEvent);
        }));
        this.intervalService.runTokenValidationRunning = periodicallyCheck$
            .pipe(catchError((error) => throwError(() => new Error(error))))
            .subscribe({
            next: (objectWithConfigIds) => {
                for (const [configId, _] of Object.entries(objectWithConfigIds)) {
                    this.configurationService
                        .getOpenIDConfiguration(configId)
                        .subscribe((config) => {
                        this.loggerService.logDebug(config, 'silent renew, periodic check finished!');
                        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {
                            this.flowsDataService.resetSilentRenewRunning(config);
                        }
                    });
                }
            },
            error: (error) => {
                this.loggerService.logError(currentConfig, 'silent renew failed!', error);
            },
        });
    }
    getRefreshEvent(config, allConfigs) {
        const shouldStartRefreshEvent = this.shouldStartPeriodicallyCheckForConfig(config);
        if (!shouldStartRefreshEvent) {
            return of(null);
        }
        const refreshEvent$ = this.createRefreshEventForConfig(config, allConfigs);
        this.publicEventsService.fireEvent(EventTypes.SilentRenewStarted);
        return refreshEvent$.pipe(catchError((error) => {
            this.loggerService.logError(config, 'silent renew failed!', error);
            this.publicEventsService.fireEvent(EventTypes.SilentRenewFailed, error);
            this.flowsDataService.resetSilentRenewRunning(config);
            return throwError(() => new Error(error));
        }));
    }
    getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled) {
        const result = configsWithSilentRenewEnabled.reduce((prev, curr) => (prev.tokenRefreshInSeconds ?? 0) < (curr.tokenRefreshInSeconds ?? 0)
            ? prev
            : curr);
        return result.tokenRefreshInSeconds ?? 0;
    }
    getConfigsWithSilentRenewEnabled(allConfigs) {
        return allConfigs.filter((x) => x.silentRenew);
    }
    createRefreshEventForConfig(configuration, allConfigs) {
        this.loggerService.logDebug(configuration, 'starting silent renew...');
        return this.configurationService
            .getOpenIDConfiguration(configuration.configId)
            .pipe(switchMap((config) => {
            if (!config?.silentRenew) {
                this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
                return of(null);
            }
            this.flowsDataService.setSilentRenewRunning(config);
            if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {
                // Retrieve Dynamically Set Custom Params for refresh body
                const customParamsRefresh = this.storagePersistenceService.read('storageCustomParamsRefresh', config) || {};
                const { customParamsRefreshTokenRequest } = config;
                const mergedParams = {
                    ...customParamsRefreshTokenRequest,
                    ...customParamsRefresh,
                };
                // Refresh Session using Refresh tokens
                return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(config, allConfigs, mergedParams);
            }
            // Retrieve Dynamically Set Custom Params
            const customParams = this.storagePersistenceService.read('storageCustomParamsAuthRequest', config);
            return this.refreshSessionIframeService.refreshSessionWithIframe(config, allConfigs, customParams);
        }));
    }
    shouldStartPeriodicallyCheckForConfig(config) {
        const idToken = this.authStateService.getIdToken(config);
        const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(config);
        const isCodeFlowInProgress = this.flowsDataService.isCodeFlowInProgress(config);
        const userDataFromStore = this.userService.getUserDataFromStore(config);
        this.loggerService.logDebug(config, `Checking: silentRenewRunning: ${isSilentRenewRunning}, isCodeFlowInProgress: ${isCodeFlowInProgress} - has idToken: ${!!idToken} - has userData: ${!!userDataFromStore}`);
        const shouldBeExecuted = !!userDataFromStore &&
            !isSilentRenewRunning &&
            !!idToken &&
            !isCodeFlowInProgress;
        if (!shouldBeExecuted) {
            return false;
        }
        const idTokenExpired = this.authStateService.hasIdTokenExpiredAndRenewCheckIsEnabled(config);
        const accessTokenExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists(config);
        return idTokenExpired || accessTokenExpired;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: PeriodicallyTokenCheckService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: PeriodicallyTokenCheckService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: PeriodicallyTokenCheckService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,