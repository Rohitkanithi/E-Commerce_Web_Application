import { Injectable, inject } from '@angular/core';
import { LoggerService } from '../../logging/logger.service';
import { allMultipleConfigRules, allRules } from './rules';
import * as i0 from "@angular/core";
export class ConfigValidationService {
    constructor() {
        this.loggerService = inject(LoggerService);
    }
    validateConfigs(passedConfigs) {
        return this.validateConfigsInternal(passedConfigs ?? [], allMultipleConfigRules);
    }
    validateConfig(passedConfig) {
        return this.validateConfigInternal(passedConfig, allRules);
    }
    validateConfigsInternal(passedConfigs, allRulesToUse) {
        if (passedConfigs.length === 0) {
            return false;
        }
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfigs));
        let overallErrorCount = 0;
        passedConfigs.forEach((passedConfig) => {
            const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);
            overallErrorCount += errorCount;
        });
        return overallErrorCount === 0;
    }
    validateConfigInternal(passedConfig, allRulesToUse) {
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfig));
        const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);
        return errorCount === 0;
    }
    processValidationResultsAndGetErrorCount(allValidationResults, config) {
        const allMessages = allValidationResults.filter((x) => x.messages.length > 0);
        const allErrorMessages = this.getAllMessagesOfType('error', allMessages);
        const allWarnings = this.getAllMessagesOfType('warning', allMessages);
        allErrorMessages.forEach((message) => this.loggerService.logError(config, message));
        allWarnings.forEach((message) => this.loggerService.logWarning(config, message));
        return allErrorMessages.length;
    }
    getAllMessagesOfType(type, results) {
        const allMessages = results
            .filter((x) => x.level === type)
            .map((result) => result.messages);
        return allMessages.reduce((acc, val) => acc.concat(val), []);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ConfigValidationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ConfigValidationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ConfigValidationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2NvbmZpZy92YWxpZGF0aW9uL2NvbmZpZy12YWxpZGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRzdELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7O0FBRzNELE1BQU0sT0FBTyx1QkFBdUI7SUFEcEM7UUFFbUIsa0JBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7S0FxRnhEO0lBbkZDLGVBQWUsQ0FBQyxhQUFvQztRQUNsRCxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FDakMsYUFBYSxJQUFJLEVBQUUsRUFDbkIsc0JBQXNCLENBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYyxDQUFDLFlBQWlDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRU8sdUJBQXVCLENBQzdCLGFBQW9DLEVBQ3BDLGFBQWdGO1FBRWhGLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDOUIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sb0JBQW9CLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQ3RELElBQUksQ0FBQyxhQUFhLENBQUMsQ0FDcEIsQ0FBQztRQUVGLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBRTFCLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsd0NBQXdDLENBQzlELG9CQUFvQixFQUNwQixZQUFZLENBQ2IsQ0FBQztZQUVGLGlCQUFpQixJQUFJLFVBQVUsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8saUJBQWlCLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxzQkFBc0IsQ0FDNUIsWUFBaUMsRUFDakMsYUFBOEU7UUFFOUUsTUFBTSxvQkFBb0IsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDdEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUNuQixDQUFDO1FBRUYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLHdDQUF3QyxDQUM5RCxvQkFBb0IsRUFDcEIsWUFBWSxDQUNiLENBQUM7UUFFRixPQUFPLFVBQVUsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVPLHdDQUF3QyxDQUM5QyxvQkFBNEMsRUFDNUMsTUFBMkI7UUFFM0IsTUFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUM3QyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUM3QixDQUFDO1FBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFdEUsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUM3QyxDQUFDO1FBQ0YsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQzlCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FDL0MsQ0FBQztRQUVGLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFFTyxvQkFBb0IsQ0FDMUIsSUFBVyxFQUNYLE9BQStCO1FBRS9CLE1BQU0sV0FBVyxHQUFHLE9BQU87YUFDeEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQzthQUMvQixHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwQyxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7OEdBckZVLHVCQUF1QjtrSEFBdkIsdUJBQXVCLGNBRFYsTUFBTTs7MkZBQ25CLHVCQUF1QjtrQkFEbkMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ2dlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9sb2dnaW5nL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9vcGVuaWQtY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBMZXZlbCwgUnVsZVZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICcuL3J1bGUnO1xuaW1wb3J0IHsgYWxsTXVsdGlwbGVDb25maWdSdWxlcywgYWxsUnVsZXMgfSBmcm9tICcuL3J1bGVzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDb25maWdWYWxpZGF0aW9uU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyU2VydmljZSA9IGluamVjdChMb2dnZXJTZXJ2aWNlKTtcblxuICB2YWxpZGF0ZUNvbmZpZ3MocGFzc2VkQ29uZmlnczogT3BlbklkQ29uZmlndXJhdGlvbltdKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVDb25maWdzSW50ZXJuYWwoXG4gICAgICBwYXNzZWRDb25maWdzID8/IFtdLFxuICAgICAgYWxsTXVsdGlwbGVDb25maWdSdWxlc1xuICAgICk7XG4gIH1cblxuICB2YWxpZGF0ZUNvbmZpZyhwYXNzZWRDb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUNvbmZpZ0ludGVybmFsKHBhc3NlZENvbmZpZywgYWxsUnVsZXMpO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZUNvbmZpZ3NJbnRlcm5hbChcbiAgICBwYXNzZWRDb25maWdzOiBPcGVuSWRDb25maWd1cmF0aW9uW10sXG4gICAgYWxsUnVsZXNUb1VzZTogKChwYXNzZWRDb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb25bXSkgPT4gUnVsZVZhbGlkYXRpb25SZXN1bHQpW11cbiAgKTogYm9vbGVhbiB7XG4gICAgaWYgKHBhc3NlZENvbmZpZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsVmFsaWRhdGlvblJlc3VsdHMgPSBhbGxSdWxlc1RvVXNlLm1hcCgocnVsZSkgPT5cbiAgICAgIHJ1bGUocGFzc2VkQ29uZmlncylcbiAgICApO1xuXG4gICAgbGV0IG92ZXJhbGxFcnJvckNvdW50ID0gMDtcblxuICAgIHBhc3NlZENvbmZpZ3MuZm9yRWFjaCgocGFzc2VkQ29uZmlnKSA9PiB7XG4gICAgICBjb25zdCBlcnJvckNvdW50ID0gdGhpcy5wcm9jZXNzVmFsaWRhdGlvblJlc3VsdHNBbmRHZXRFcnJvckNvdW50KFxuICAgICAgICBhbGxWYWxpZGF0aW9uUmVzdWx0cyxcbiAgICAgICAgcGFzc2VkQ29uZmlnXG4gICAgICApO1xuXG4gICAgICBvdmVyYWxsRXJyb3JDb3VudCArPSBlcnJvckNvdW50O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG92ZXJhbGxFcnJvckNvdW50ID09PSAwO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZUNvbmZpZ0ludGVybmFsKFxuICAgIHBhc3NlZENvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbixcbiAgICBhbGxSdWxlc1RvVXNlOiAoKHBhc3NlZENvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbikgPT4gUnVsZVZhbGlkYXRpb25SZXN1bHQpW11cbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgYWxsVmFsaWRhdGlvblJlc3VsdHMgPSBhbGxSdWxlc1RvVXNlLm1hcCgocnVsZSkgPT5cbiAgICAgIHJ1bGUocGFzc2VkQ29uZmlnKVxuICAgICk7XG5cbiAgICBjb25zdCBlcnJvckNvdW50ID0gdGhpcy5wcm9jZXNzVmFsaWRhdGlvblJlc3VsdHNBbmRHZXRFcnJvckNvdW50KFxuICAgICAgYWxsVmFsaWRhdGlvblJlc3VsdHMsXG4gICAgICBwYXNzZWRDb25maWdcbiAgICApO1xuXG4gICAgcmV0dXJuIGVycm9yQ291bnQgPT09IDA7XG4gIH1cblxuICBwcml2YXRlIHByb2Nlc3NWYWxpZGF0aW9uUmVzdWx0c0FuZEdldEVycm9yQ291bnQoXG4gICAgYWxsVmFsaWRhdGlvblJlc3VsdHM6IFJ1bGVWYWxpZGF0aW9uUmVzdWx0W10sXG4gICAgY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uXG4gICk6IG51bWJlciB7XG4gICAgY29uc3QgYWxsTWVzc2FnZXMgPSBhbGxWYWxpZGF0aW9uUmVzdWx0cy5maWx0ZXIoXG4gICAgICAoeCkgPT4geC5tZXNzYWdlcy5sZW5ndGggPiAwXG4gICAgKTtcbiAgICBjb25zdCBhbGxFcnJvck1lc3NhZ2VzID0gdGhpcy5nZXRBbGxNZXNzYWdlc09mVHlwZSgnZXJyb3InLCBhbGxNZXNzYWdlcyk7XG4gICAgY29uc3QgYWxsV2FybmluZ3MgPSB0aGlzLmdldEFsbE1lc3NhZ2VzT2ZUeXBlKCd3YXJuaW5nJywgYWxsTWVzc2FnZXMpO1xuXG4gICAgYWxsRXJyb3JNZXNzYWdlcy5mb3JFYWNoKChtZXNzYWdlKSA9PlxuICAgICAgdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ0Vycm9yKGNvbmZpZywgbWVzc2FnZSlcbiAgICApO1xuICAgIGFsbFdhcm5pbmdzLmZvckVhY2goKG1lc3NhZ2UpID0+XG4gICAgICB0aGlzLmxvZ2dlclNlcnZpY2UubG9nV2FybmluZyhjb25maWcsIG1lc3NhZ2UpXG4gICAgKTtcblxuICAgIHJldHVybiBhbGxFcnJvck1lc3NhZ2VzLmxlbmd0aDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWxsTWVzc2FnZXNPZlR5cGUoXG4gICAgdHlwZTogTGV2ZWwsXG4gICAgcmVzdWx0czogUnVsZVZhbGlkYXRpb25SZXN1bHRbXVxuICApOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgYWxsTWVzc2FnZXMgPSByZXN1bHRzXG4gICAgICAuZmlsdGVyKCh4KSA9PiB4LmxldmVsID09PSB0eXBlKVxuICAgICAgLm1hcCgocmVzdWx0KSA9PiByZXN1bHQubWVzc2FnZXMpO1xuXG4gICAgcmV0dXJuIGFsbE1lc3NhZ2VzLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pO1xuICB9XG59XG4iXX0=