import { inject, Injectable } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { concatMap, map } from 'rxjs/operators';
import { LoggerService } from '../logging/logger.service';
import { EventTypes } from '../public-events/event-types';
import { PublicEventsService } from '../public-events/public-events.service';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { PlatformProvider } from '../utils/platform-provider/platform.provider';
import { AuthWellKnownService } from './auth-well-known/auth-well-known.service';
import { DEFAULT_CONFIG } from './default-config';
import { StsConfigLoader } from './loader/config-loader';
import { ConfigValidationService } from './validation/config-validation.service';
import * as i0 from "@angular/core";
export class ConfigurationService {
    constructor() {
        this.loggerService = inject(LoggerService);
        this.publicEventsService = inject(PublicEventsService);
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.platformProvider = inject(PlatformProvider);
        this.authWellKnownService = inject(AuthWellKnownService);
        this.loader = inject(StsConfigLoader);
        this.configValidationService = inject(ConfigValidationService);
        this.configsInternal = {};
    }
    hasManyConfigs() {
        return Object.keys(this.configsInternal).length > 1;
    }
    getAllConfigurations() {
        return Object.values(this.configsInternal);
    }
    getOpenIDConfiguration(configId) {
        if (this.configsAlreadySaved()) {
            return of(this.getConfig(configId));
        }
        return this.getOpenIDConfigurations(configId).pipe(map((result) => result.currentConfig));
    }
    getOpenIDConfigurations(configId) {
        return this.loadConfigs().pipe(concatMap((allConfigs) => this.prepareAndSaveConfigs(allConfigs)), map((allPreparedConfigs) => ({
            allConfigs: allPreparedConfigs,
            currentConfig: this.getConfig(configId),
        })));
    }
    hasAtLeastOneConfig() {
        return Object.keys(this.configsInternal).length > 0;
    }
    saveConfig(readyConfig) {
        const { configId } = readyConfig;
        this.configsInternal[configId] = readyConfig;
    }
    loadConfigs() {
        return this.loader.loadConfigs();
    }
    configsAlreadySaved() {
        return this.hasAtLeastOneConfig();
    }
    getConfig(configId) {
        if (Boolean(configId)) {
            return this.configsInternal[configId] || null;
        }
        const [, value] = Object.entries(this.configsInternal)[0] || [[null, null]];
        return value || null;
    }
    prepareAndSaveConfigs(passedConfigs) {
        if (!this.configValidationService.validateConfigs(passedConfigs)) {
            return of([]);
        }
        this.createUniqueIds(passedConfigs);
        const allHandleConfigs$ = passedConfigs.map((x) => this.handleConfig(x));
        const as = forkJoin(allHandleConfigs$).pipe(map((config) => config.filter((conf) => Boolean(conf))), map((c) => c));
        return as;
    }
    createUniqueIds(passedConfigs) {
        passedConfigs.forEach((config, index) => {
            if (!config.configId) {
                config.configId = `${index}-${config.clientId}`;
            }
        });
    }
    handleConfig(passedConfig) {
        if (!this.configValidationService.validateConfig(passedConfig)) {
            this.loggerService.logError(passedConfig, 'Validation of config rejected with errors. Config is NOT set.');
            return of(null);
        }
        if (!passedConfig.authWellknownEndpointUrl) {
            passedConfig.authWellknownEndpointUrl = passedConfig.authority;
        }
        const usedConfig = this.prepareConfig(passedConfig);
        this.saveConfig(usedConfig);
        const configWithAuthWellKnown = this.enhanceConfigWithWellKnownEndpoint(usedConfig);
        this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, configWithAuthWellKnown);
        return of(usedConfig);
    }
    enhanceConfigWithWellKnownEndpoint(configuration) {
        const alreadyExistingAuthWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);
        if (!!alreadyExistingAuthWellKnownEndpoints) {
            configuration.authWellknownEndpoints =
                alreadyExistingAuthWellKnownEndpoints;
            return configuration;
        }
        const passedAuthWellKnownEndpoints = configuration.authWellknownEndpoints;
        if (!!passedAuthWellKnownEndpoints) {
            this.authWellKnownService.storeWellKnownEndpoints(configuration, passedAuthWellKnownEndpoints);
            configuration.authWellknownEndpoints = passedAuthWellKnownEndpoints;
            return configuration;
        }
        return configuration;
    }
    prepareConfig(configuration) {
        const openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };
        this.setSpecialCases(openIdConfigurationInternal);
        return openIdConfigurationInternal;
    }
    setSpecialCases(currentConfig) {
        if (!this.platformProvider.isBrowser()) {
            currentConfig.startCheckSession = false;
            currentConfig.silentRenew = false;
            currentConfig.useRefreshToken = false;
            currentConfig.usePushedAuthorisationRequests = false;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ConfigurationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ConfigurationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ConfigurationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,