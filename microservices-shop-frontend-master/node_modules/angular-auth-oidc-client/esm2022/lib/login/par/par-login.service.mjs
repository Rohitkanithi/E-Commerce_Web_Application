import { Injectable, inject } from '@angular/core';
import { of, throwError } from 'rxjs';
import { switchMap, take } from 'rxjs/operators';
import { CheckAuthService } from '../../auth-state/check-auth.service';
import { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';
import { LoggerService } from '../../logging/logger.service';
import { RedirectService } from '../../utils/redirect/redirect.service';
import { UrlService } from '../../utils/url/url.service';
import { PopUpService } from '../popup/popup.service';
import { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';
import { ParService } from './par.service';
import * as i0 from "@angular/core";
export class ParLoginService {
    constructor() {
        this.loggerService = inject(LoggerService);
        this.responseTypeValidationService = inject(ResponseTypeValidationService);
        this.urlService = inject(UrlService);
        this.redirectService = inject(RedirectService);
        this.authWellKnownService = inject(AuthWellKnownService);
        this.popupService = inject(PopUpService);
        this.checkAuthService = inject(CheckAuthService);
        this.parService = inject(ParService);
    }
    loginPar(configuration, authOptions) {
        if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {
            this.loggerService.logError(configuration, 'Invalid response type!');
            return;
        }
        this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow, no auth data');
        this.authWellKnownService
            .queryAndStoreAuthWellKnownEndPoints(configuration)
            .pipe(switchMap(() => this.parService.postParRequest(configuration, authOptions)))
            .subscribe((response) => {
            this.loggerService.logDebug(configuration, 'par response: ', response);
            const url = this.urlService.getAuthorizeParUrl(response.requestUri, configuration);
            this.loggerService.logDebug(configuration, 'par request url: ', url);
            if (!url) {
                this.loggerService.logError(configuration, `Could not create URL with param ${response.requestUri}: '${url}'`);
                return;
            }
            if (authOptions?.urlHandler) {
                authOptions.urlHandler(url);
            }
            else {
                this.redirectService.redirectTo(url);
            }
        });
    }
    loginWithPopUpPar(configuration, allConfigs, authOptions, popupOptions) {
        const { configId } = configuration;
        if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {
            const errorMessage = 'Invalid response type!';
            this.loggerService.logError(configuration, errorMessage);
            return throwError(() => new Error(errorMessage));
        }
        this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow with popup, no auth data');
        return this.authWellKnownService
            .queryAndStoreAuthWellKnownEndPoints(configuration)
            .pipe(switchMap(() => this.parService.postParRequest(configuration, authOptions)), switchMap((response) => {
            this.loggerService.logDebug(configuration, `par response: ${response}`);
            const url = this.urlService.getAuthorizeParUrl(response.requestUri, configuration);
            this.loggerService.logDebug(configuration, 'par request url: ', url);
            if (!url) {
                const errorMessage = `Could not create URL with param ${response.requestUri}: 'url'`;
                this.loggerService.logError(configuration, errorMessage);
                return throwError(() => new Error(errorMessage));
            }
            this.popupService.openPopUp(url, popupOptions, configuration);
            return this.popupService.result$.pipe(take(1), switchMap((result) => {
                const { userClosed, receivedUrl } = result;
                if (userClosed) {
                    return of({
                        isAuthenticated: false,
                        errorMessage: 'User closed popup',
                        userData: null,
                        idToken: '',
                        accessToken: '',
                        configId,
                    });
                }
                return this.checkAuthService.checkAuth(configuration, allConfigs, receivedUrl);
            }));
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ParLoginService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ParLoginService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: ParLoginService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,