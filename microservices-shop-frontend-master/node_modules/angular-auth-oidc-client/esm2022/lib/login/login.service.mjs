import { Injectable, inject } from '@angular/core';
import { of } from 'rxjs';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { ParLoginService } from './par/par-login.service';
import { PopUpLoginService } from './popup/popup-login.service';
import { PopUpService } from './popup/popup.service';
import { StandardLoginService } from './standard/standard-login.service';
import * as i0 from "@angular/core";
export class LoginService {
    constructor() {
        this.parLoginService = inject(ParLoginService);
        this.popUpLoginService = inject(PopUpLoginService);
        this.standardLoginService = inject(StandardLoginService);
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.popupService = inject(PopUpService);
    }
    login(configuration, authOptions) {
        if (!configuration) {
            throw new Error('Please provide a configuration before setting up the module');
        }
        const { usePushedAuthorisationRequests } = configuration;
        if (authOptions?.customParams) {
            this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configuration);
        }
        if (usePushedAuthorisationRequests) {
            return this.parLoginService.loginPar(configuration, authOptions);
        }
        else {
            return this.standardLoginService.loginStandard(configuration, authOptions);
        }
    }
    loginWithPopUp(configuration, allConfigs, authOptions, popupOptions) {
        if (!configuration) {
            throw new Error('Please provide a configuration before setting up the module');
        }
        const isAlreadyInPopUp = this.popupService.isCurrentlyInPopup(configuration);
        if (isAlreadyInPopUp) {
            return of({
                errorMessage: 'There is already a popup open.',
            });
        }
        const { usePushedAuthorisationRequests } = configuration;
        if (authOptions?.customParams) {
            this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configuration);
        }
        if (usePushedAuthorisationRequests) {
            return this.parLoginService.loginWithPopUpPar(configuration, allConfigs, authOptions, popupOptions);
        }
        return this.popUpLoginService.loginWithPopUpStandard(configuration, allConfigs, authOptions, popupOptions);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: LoginService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: LoginService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: LoginService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2xvZ2luL2xvZ2luLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd0QyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUVuRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOztBQUd6RSxNQUFNLE9BQU8sWUFBWTtJQUR6QjtRQUVtQixvQkFBZSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUUxQyxzQkFBaUIsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUU5Qyx5QkFBb0IsR0FBRyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUVwRCw4QkFBeUIsR0FBRyxNQUFNLENBQ2pELHlCQUF5QixDQUMxQixDQUFDO1FBRWUsaUJBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7S0ErRXREO0lBN0VDLEtBQUssQ0FDSCxhQUF5QyxFQUN6QyxXQUF5QjtRQUV6QixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQ2IsNkRBQTZELENBQzlELENBQUM7U0FDSDtRQUVELE1BQU0sRUFBRSw4QkFBOEIsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUV6RCxJQUFJLFdBQVcsRUFBRSxZQUFZLEVBQUU7WUFDN0IsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FDbEMsZ0NBQWdDLEVBQ2hDLFdBQVcsQ0FBQyxZQUFZLEVBQ3hCLGFBQWEsQ0FDZCxDQUFDO1NBQ0g7UUFFRCxJQUFJLDhCQUE4QixFQUFFO1lBQ2xDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ2xFO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQzVDLGFBQWEsRUFDYixXQUFXLENBQ1osQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FDWixhQUF5QyxFQUN6QyxVQUFpQyxFQUNqQyxXQUF5QixFQUN6QixZQUEyQjtRQUUzQixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQ2IsNkRBQTZELENBQzlELENBQUM7U0FDSDtRQUVELE1BQU0sZ0JBQWdCLEdBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFdEQsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQixPQUFPLEVBQUUsQ0FBQztnQkFDUixZQUFZLEVBQUUsZ0NBQWdDO2FBQzlCLENBQUMsQ0FBQztTQUNyQjtRQUVELE1BQU0sRUFBRSw4QkFBOEIsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUV6RCxJQUFJLFdBQVcsRUFBRSxZQUFZLEVBQUU7WUFDN0IsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FDbEMsZ0NBQWdDLEVBQ2hDLFdBQVcsQ0FBQyxZQUFZLEVBQ3hCLGFBQWEsQ0FDZCxDQUFDO1NBQ0g7UUFFRCxJQUFJLDhCQUE4QixFQUFFO1lBQ2xDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FDM0MsYUFBYSxFQUNiLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxDQUNiLENBQUM7U0FDSDtRQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHNCQUFzQixDQUNsRCxhQUFhLEVBQ2IsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLENBQ2IsQ0FBQztJQUNKLENBQUM7OEdBekZVLFlBQVk7a0hBQVosWUFBWSxjQURDLE1BQU07OzJGQUNuQixZQUFZO2tCQUR4QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEF1dGhPcHRpb25zIH0gZnJvbSAnLi4vYXV0aC1vcHRpb25zJztcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9jb25maWcvb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RvcmFnZVBlcnNpc3RlbmNlU2VydmljZSB9IGZyb20gJy4uL3N0b3JhZ2Uvc3RvcmFnZS1wZXJzaXN0ZW5jZS5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luUmVzcG9uc2UgfSBmcm9tICcuL2xvZ2luLXJlc3BvbnNlJztcbmltcG9ydCB7IFBhckxvZ2luU2VydmljZSB9IGZyb20gJy4vcGFyL3Bhci1sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IFBvcFVwTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi9wb3B1cC9wb3B1cC1sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IFBvcHVwT3B0aW9ucyB9IGZyb20gJy4vcG9wdXAvcG9wdXAtb3B0aW9ucyc7XG5pbXBvcnQgeyBQb3BVcFNlcnZpY2UgfSBmcm9tICcuL3BvcHVwL3BvcHVwLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RhbmRhcmRMb2dpblNlcnZpY2UgfSBmcm9tICcuL3N0YW5kYXJkL3N0YW5kYXJkLWxvZ2luLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIExvZ2luU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgcGFyTG9naW5TZXJ2aWNlID0gaW5qZWN0KFBhckxvZ2luU2VydmljZSk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBwb3BVcExvZ2luU2VydmljZSA9IGluamVjdChQb3BVcExvZ2luU2VydmljZSk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBzdGFuZGFyZExvZ2luU2VydmljZSA9IGluamVjdChTdGFuZGFyZExvZ2luU2VydmljZSk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBzdG9yYWdlUGVyc2lzdGVuY2VTZXJ2aWNlID0gaW5qZWN0KFxuICAgIFN0b3JhZ2VQZXJzaXN0ZW5jZVNlcnZpY2VcbiAgKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IHBvcHVwU2VydmljZSA9IGluamVjdChQb3BVcFNlcnZpY2UpO1xuXG4gIGxvZ2luKFxuICAgIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb24gfCBudWxsLFxuICAgIGF1dGhPcHRpb25zPzogQXV0aE9wdGlvbnNcbiAgKTogdm9pZCB7XG4gICAgaWYgKCFjb25maWd1cmF0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdQbGVhc2UgcHJvdmlkZSBhIGNvbmZpZ3VyYXRpb24gYmVmb3JlIHNldHRpbmcgdXAgdGhlIG1vZHVsZSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgeyB1c2VQdXNoZWRBdXRob3Jpc2F0aW9uUmVxdWVzdHMgfSA9IGNvbmZpZ3VyYXRpb247XG5cbiAgICBpZiAoYXV0aE9wdGlvbnM/LmN1c3RvbVBhcmFtcykge1xuICAgICAgdGhpcy5zdG9yYWdlUGVyc2lzdGVuY2VTZXJ2aWNlLndyaXRlKFxuICAgICAgICAnc3RvcmFnZUN1c3RvbVBhcmFtc0F1dGhSZXF1ZXN0JyxcbiAgICAgICAgYXV0aE9wdGlvbnMuY3VzdG9tUGFyYW1zLFxuICAgICAgICBjb25maWd1cmF0aW9uXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh1c2VQdXNoZWRBdXRob3Jpc2F0aW9uUmVxdWVzdHMpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhckxvZ2luU2VydmljZS5sb2dpblBhcihjb25maWd1cmF0aW9uLCBhdXRoT3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YW5kYXJkTG9naW5TZXJ2aWNlLmxvZ2luU3RhbmRhcmQoXG4gICAgICAgIGNvbmZpZ3VyYXRpb24sXG4gICAgICAgIGF1dGhPcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGxvZ2luV2l0aFBvcFVwKFxuICAgIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb24gfCBudWxsLFxuICAgIGFsbENvbmZpZ3M6IE9wZW5JZENvbmZpZ3VyYXRpb25bXSxcbiAgICBhdXRoT3B0aW9ucz86IEF1dGhPcHRpb25zLFxuICAgIHBvcHVwT3B0aW9ucz86IFBvcHVwT3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPExvZ2luUmVzcG9uc2U+IHtcbiAgICBpZiAoIWNvbmZpZ3VyYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1BsZWFzZSBwcm92aWRlIGEgY29uZmlndXJhdGlvbiBiZWZvcmUgc2V0dGluZyB1cCB0aGUgbW9kdWxlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0FscmVhZHlJblBvcFVwID1cbiAgICAgIHRoaXMucG9wdXBTZXJ2aWNlLmlzQ3VycmVudGx5SW5Qb3B1cChjb25maWd1cmF0aW9uKTtcblxuICAgIGlmIChpc0FscmVhZHlJblBvcFVwKSB7XG4gICAgICByZXR1cm4gb2Yoe1xuICAgICAgICBlcnJvck1lc3NhZ2U6ICdUaGVyZSBpcyBhbHJlYWR5IGEgcG9wdXAgb3Blbi4nLFxuICAgICAgfSBhcyBMb2dpblJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHVzZVB1c2hlZEF1dGhvcmlzYXRpb25SZXF1ZXN0cyB9ID0gY29uZmlndXJhdGlvbjtcblxuICAgIGlmIChhdXRoT3B0aW9ucz8uY3VzdG9tUGFyYW1zKSB7XG4gICAgICB0aGlzLnN0b3JhZ2VQZXJzaXN0ZW5jZVNlcnZpY2Uud3JpdGUoXG4gICAgICAgICdzdG9yYWdlQ3VzdG9tUGFyYW1zQXV0aFJlcXVlc3QnLFxuICAgICAgICBhdXRoT3B0aW9ucy5jdXN0b21QYXJhbXMsXG4gICAgICAgIGNvbmZpZ3VyYXRpb25cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHVzZVB1c2hlZEF1dGhvcmlzYXRpb25SZXF1ZXN0cykge1xuICAgICAgcmV0dXJuIHRoaXMucGFyTG9naW5TZXJ2aWNlLmxvZ2luV2l0aFBvcFVwUGFyKFxuICAgICAgICBjb25maWd1cmF0aW9uLFxuICAgICAgICBhbGxDb25maWdzLFxuICAgICAgICBhdXRoT3B0aW9ucyxcbiAgICAgICAgcG9wdXBPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBvcFVwTG9naW5TZXJ2aWNlLmxvZ2luV2l0aFBvcFVwU3RhbmRhcmQoXG4gICAgICBjb25maWd1cmF0aW9uLFxuICAgICAgYWxsQ29uZmlncyxcbiAgICAgIGF1dGhPcHRpb25zLFxuICAgICAgcG9wdXBPcHRpb25zXG4gICAgKTtcbiAgfVxufVxuIl19