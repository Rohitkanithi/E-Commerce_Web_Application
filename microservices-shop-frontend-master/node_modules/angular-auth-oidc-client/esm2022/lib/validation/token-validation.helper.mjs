export function getVerifyAlg(alg) {
    switch (alg.charAt(0)) {
        case 'R':
            return {
                name: 'RSASSA-PKCS1-v1_5',
                hash: 'SHA-256',
            };
        case 'E':
            if (alg.includes('256')) {
                return {
                    name: 'ECDSA',
                    hash: 'SHA-256',
                };
            }
            else if (alg.includes('384')) {
                return {
                    name: 'ECDSA',
                    hash: 'SHA-384',
                };
            }
            else {
                return null;
            }
        default:
            return null;
    }
}
export function alg2kty(alg) {
    switch (alg.charAt(0)) {
        case 'R':
            return 'RSA';
        case 'E':
            return 'EC';
        default:
            throw new Error('Cannot infer kty from alg: ' + alg);
    }
}
export function getImportAlg(alg) {
    switch (alg.charAt(0)) {
        case 'R':
            if (alg.includes('256')) {
                return {
                    name: 'RSASSA-PKCS1-v1_5',
                    hash: 'SHA-256',
                };
            }
            else if (alg.includes('384')) {
                return {
                    name: 'RSASSA-PKCS1-v1_5',
                    hash: 'SHA-384',
                };
            }
            else if (alg.includes('512')) {
                return {
                    name: 'RSASSA-PKCS1-v1_5',
                    hash: 'SHA-512',
                };
            }
            else {
                return null;
            }
        case 'E':
            if (alg.includes('256')) {
                return {
                    name: 'ECDSA',
                    namedCurve: 'P-256',
                };
            }
            else if (alg.includes('384')) {
                return {
                    name: 'ECDSA',
                    namedCurve: 'P-384',
                };
            }
            else {
                return null;
            }
        default:
            return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW4tdmFsaWRhdGlvbi5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQvc3JjL2xpYi92YWxpZGF0aW9uL3Rva2VuLXZhbGlkYXRpb24uaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxZQUFZLENBQzFCLEdBQVc7SUFFWCxRQUFRLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDckIsS0FBSyxHQUFHO1lBQ04sT0FBTztnQkFDTCxJQUFJLEVBQUUsbUJBQW1CO2dCQUN6QixJQUFJLEVBQUUsU0FBUzthQUNoQixDQUFDO1FBQ0osS0FBSyxHQUFHO1lBQ04sSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN2QixPQUFPO29CQUNMLElBQUksRUFBRSxPQUFPO29CQUNiLElBQUksRUFBRSxTQUFTO2lCQUNoQixDQUFDO2FBQ0g7aUJBQU0sSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM5QixPQUFPO29CQUNMLElBQUksRUFBRSxPQUFPO29CQUNiLElBQUksRUFBRSxTQUFTO2lCQUNoQixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsT0FBTyxJQUFJLENBQUM7YUFDYjtRQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUM7S0FDZjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLEdBQVc7SUFDakMsUUFBUSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLEtBQUssR0FBRztZQUNOLE9BQU8sS0FBSyxDQUFDO1FBRWYsS0FBSyxHQUFHO1lBQ04sT0FBTyxJQUFJLENBQUM7UUFFZDtZQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDeEQ7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FDMUIsR0FBVztJQUVYLFFBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNyQixLQUFLLEdBQUc7WUFDTixJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3ZCLE9BQU87b0JBQ0wsSUFBSSxFQUFFLG1CQUFtQjtvQkFDekIsSUFBSSxFQUFFLFNBQVM7aUJBQ2hCLENBQUM7YUFDSDtpQkFBTSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLE9BQU87b0JBQ0wsSUFBSSxFQUFFLG1CQUFtQjtvQkFDekIsSUFBSSxFQUFFLFNBQVM7aUJBQ2hCLENBQUM7YUFDSDtpQkFBTSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLE9BQU87b0JBQ0wsSUFBSSxFQUFFLG1CQUFtQjtvQkFDekIsSUFBSSxFQUFFLFNBQVM7aUJBQ2hCLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQzthQUNiO1FBQ0gsS0FBSyxHQUFHO1lBQ04sSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN2QixPQUFPO29CQUNMLElBQUksRUFBRSxPQUFPO29CQUNiLFVBQVUsRUFBRSxPQUFPO2lCQUNwQixDQUFDO2FBQ0g7aUJBQU0sSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM5QixPQUFPO29CQUNMLElBQUksRUFBRSxPQUFPO29CQUNiLFVBQVUsRUFBRSxPQUFPO2lCQUNwQixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsT0FBTyxJQUFJLENBQUM7YUFDYjtRQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUM7S0FDZjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0VmVyaWZ5QWxnKFxuICBhbGc6IHN0cmluZ1xuKTogUnNhSGFzaGVkSW1wb3J0UGFyYW1zIHwgRWNkc2FQYXJhbXMgfCBudWxsIHtcbiAgc3dpdGNoIChhbGcuY2hhckF0KDApKSB7XG4gICAgY2FzZSAnUic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLFxuICAgICAgICBoYXNoOiAnU0hBLTI1NicsXG4gICAgICB9O1xuICAgIGNhc2UgJ0UnOlxuICAgICAgaWYgKGFsZy5pbmNsdWRlcygnMjU2JykpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiAnRUNEU0EnLFxuICAgICAgICAgIGhhc2g6ICdTSEEtMjU2JyxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoYWxnLmluY2x1ZGVzKCczODQnKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6ICdFQ0RTQScsXG4gICAgICAgICAgaGFzaDogJ1NIQS0zODQnLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGcya3R5KGFsZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgc3dpdGNoIChhbGcuY2hhckF0KDApKSB7XG4gICAgY2FzZSAnUic6XG4gICAgICByZXR1cm4gJ1JTQSc7XG5cbiAgICBjYXNlICdFJzpcbiAgICAgIHJldHVybiAnRUMnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGluZmVyIGt0eSBmcm9tIGFsZzogJyArIGFsZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEltcG9ydEFsZyhcbiAgYWxnOiBzdHJpbmdcbik6IFJzYUhhc2hlZEltcG9ydFBhcmFtcyB8IEVjS2V5SW1wb3J0UGFyYW1zIHwgbnVsbCB7XG4gIHN3aXRjaCAoYWxnLmNoYXJBdCgwKSkge1xuICAgIGNhc2UgJ1InOlxuICAgICAgaWYgKGFsZy5pbmNsdWRlcygnMjU2JykpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLFxuICAgICAgICAgIGhhc2g6ICdTSEEtMjU2JyxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoYWxnLmluY2x1ZGVzKCczODQnKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsXG4gICAgICAgICAgaGFzaDogJ1NIQS0zODQnLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChhbGcuaW5jbHVkZXMoJzUxMicpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyxcbiAgICAgICAgICBoYXNoOiAnU0hBLTUxMicsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICBjYXNlICdFJzpcbiAgICAgIGlmIChhbGcuaW5jbHVkZXMoJzI1NicpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogJ0VDRFNBJyxcbiAgICAgICAgICBuYW1lZEN1cnZlOiAnUC0yNTYnLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChhbGcuaW5jbHVkZXMoJzM4NCcpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogJ0VDRFNBJyxcbiAgICAgICAgICBuYW1lZEN1cnZlOiAnUC0zODQnLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=