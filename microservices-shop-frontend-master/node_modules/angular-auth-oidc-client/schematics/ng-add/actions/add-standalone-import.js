"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addStandaloneConfigsToProviders = void 0;
const standalone_1 = require("@schematics/angular/private/standalone");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const change_1 = require("@schematics/angular/utility/change");
const ts = require("typescript");
const angular_utils_1 = require("../../utils/angular-utils");
function addStandaloneConfigsToProviders(options) {
    return (host, context) => {
        const project = (0, angular_utils_1.getProject)(host);
        const { fileName, configName } = options.standaloneInfo;
        const standaloneConfigs = [
            {
                target: `${project.sourceRoot}/main.ts`,
                configName,
                configPath: `./auth/${fileName}`,
            },
        ];
        standaloneConfigs.forEach(({ target, configName, configPath }) => {
            addProvider(host, context, configName, configPath, target);
        });
        context.logger.info(`✅️ All imports done, please add the 'provideRouter()' as well if you don't have it provided yet.`);
        return host;
    };
}
exports.addStandaloneConfigsToProviders = addStandaloneConfigsToProviders;
function addProvider(host, context, configName, configPath, target) {
    const sourcefile = (0, angular_utils_1.readIntoSourceFile)(host, target);
    const providerFn = 'provideAuth';
    if ((0, standalone_1.callsProvidersFunction)(host, sourcefile.fileName, providerFn)) {
        // exit because the store config is already provided
        return host;
    }
    const patchedConfigFile = (0, standalone_1.addFunctionalProvidersToStandaloneBootstrap)(host, sourcefile.fileName, providerFn, 'angular-auth-oidc-client', [ts.factory.createIdentifier('authConfig')]);
    const configFileContent = host.read(patchedConfigFile);
    const source = ts.createSourceFile(patchedConfigFile, (configFileContent === null || configFileContent === void 0 ? void 0 : configFileContent.toString('utf-8')) || '', ts.ScriptTarget.Latest, true);
    const change = (0, ast_utils_1.insertImport)(source, // Angular uses the TS 5.1 compiler internally for schematics?
    patchedConfigFile, configName, configPath);
    const recorder = host.beginUpdate(patchedConfigFile);
    if (change instanceof change_1.InsertChange) {
        recorder.insertLeft(change.pos, change.toAdd);
    }
    host.commitUpdate(recorder);
    return host;
}
//# sourceMappingURL=add-standalone-import.js.map